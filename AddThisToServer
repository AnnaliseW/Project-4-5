boolean exitSeller = false;

                String userName = reader.readLine();
                String userEmail = reader.readLine();
                String userPassword = reader.readLine();

                userAccount = new User(userName, userEmail, userPassword, true);

                ArrayList<Product> myProducts = GUISellerView.generateMyProducts(userAccount);

                while (!exitSeller) {
                    String button = reader.readLine();

                    if (button.equals("sellButton")) {
                        String productToSell = reader.readLine();
                        String[] productInfoParts = productToSell.split(",");
                        String productName = productInfoParts[0];
                        String storeName = productInfoParts[1];
                        String description = productInfoParts[2];
                        int quantity = Integer.parseInt(productInfoParts[3]);
                        double price = Double.parseDouble(productInfoParts[4]);

                        Product sellThis = new Product(productName, storeName, description, quantity, price);

                        //myProducts arraylist (in server)
                        myProducts.add(sellThis);
                        Methods method = new Methods();
                        //Products arraylist (all products on market)
                        Methods.productsOnMarket.add(sellThis);
                        method.saveProductFile(Methods.productsOnMarket);
                        //Data file (data for each account)
                        method.saveDataFileWhenNewProductAddedUserAccount(userAccount, sellThis);

                        writer.println("Success");

                    } else if (button.equals("editButton")) {

                        if (myProducts.isEmpty()) {
                            writer.println("Empty");
                        } else {
                            for (Product product : myProducts) {
                                writer.println(product.statisticsToString());
                            }
                        }

                        int selection = Integer.parseInt(reader.readLine());

                        String newProductName = reader.readLine();
                        String newStoreName = reader.readLine();
                        String newDescription = reader.readLine();
                        int newQuantity = Integer.parseInt(reader.readLine());
                        double newPrice = Double.parseDouble(reader.readLine());

                        Product selected = myProducts.get(selection);

                        //myProducts arraylist (in server)
                        myProducts.get(selection).setProductName(newProductName);
                        myProducts.get(selection).setStoreName(newStoreName);
                        myProducts.get(selection).setDescriptionOfProduct(newDescription);
                        myProducts.get(selection).setQuantityAvailable(newQuantity);
                        myProducts.get(selection).setPrice(newPrice);

                        Methods method = new Methods();
                        //Products arraylist (all products on market)
                        int indexSelectionMarket = Methods.productsOnMarket.indexOf(selected);
                        Methods.productsOnMarket.get(indexSelectionMarket).setProductName(newProductName);
                        Methods.productsOnMarket.get(indexSelectionMarket).setStoreName(newStoreName);
                        Methods.productsOnMarket.get(indexSelectionMarket).setDescriptionOfProduct(newDescription);
                        Methods.productsOnMarket.get(indexSelectionMarket).setQuantityAvailable(newQuantity);
                        Methods.productsOnMarket.get(indexSelectionMarket).setPrice(newPrice);
                        method.saveProductFile(Methods.productsOnMarket);

                        //Data file (data for each account)
                        Product newProduct = new Product(newProductName, newStoreName, newDescription, newQuantity, newPrice);
                        method.replaceProductInDataFile(selected, newProduct);

                        writer.println("Success");

                    } else if (button.equals("deleteButton")) {

                        if (myProducts.isEmpty()) {
                            writer.println("Empty");
                        } else {
                            for (Product product : myProducts) {
                                writer.println(product.statisticsToString());
                            }
                        }

                        int selection = Integer.parseInt(reader.readLine());

                        Product productToRemove = myProducts.get(selection);

                        //myProducts arraylist (in server)
                        myProducts.remove(selection);

                        Methods method = new Methods();
                        //Products arraylist (all products on market)
                        Methods.productsOnMarket.remove(productToRemove);
                        method.saveProductFile(Methods.productsOnMarket);

                        //Data file (data for each account)
                        method.removeProductFromDataFile(userAccount, productToRemove);

                        writer.println("Success");


                    } else if (button.equals("importButton")) {

                        ArrayList<String> receivedList = new ArrayList<>();

                        String line;
                        while ((line = reader.readLine()) != null) {
                            receivedList.add(line);
                        }

                        for (String productString : receivedList) {
                            try {
                                String[] parts = productString.split(",");
                                String productName = parts[0];
                                String storeName = parts[1];
                                String descriptionOfProduct = parts[2];
                                int quantityAvailable = Integer.parseInt(parts[3]);
                                double price = Double.parseDouble(parts[4]);
                                Product product = new Product(productName, storeName, descriptionOfProduct, quantityAvailable, price);
                                myProducts.add(product);

                                Methods method = new Methods();
                                //Products arraylist (all products on market)
                                Methods.productsOnMarket.add(product);
                                method.saveProductFile(Methods.productsOnMarket);
                                //Data file (data for each account)
                                method.saveDataFileWhenNewProductAddedUserAccount(userAccount, product);

                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "Error with number values. Please check File");
                            }
                        }

                        writer.println("Success");

                    } else if (button.equals("exportButton")) {

                        if (myProducts.size() == 0) {
                            writer.println("Empty");
                        } else {
                            for (Product product : myProducts) {
                                writer.println(product.toString());
                            }
                        }

                        int selection = Integer.parseInt(reader.readLine());

                        Product productToRemove = myProducts.get(selection);
                        myProducts.remove(selection);

                        Methods method = new Methods();
                        //Products arraylist (all products on market)
                        Methods.productsOnMarket.remove(productToRemove);
                        method.saveProductFile(Methods.productsOnMarket);

                        //Data file (data for each account)
                        method.removeProductFromDataFile(userAccount, productToRemove);

                        writer.println("Success");

                    } else if (button.equals("salesByStoreButton")) {
                        //TODO: salesbystore

                    } else if (button.equals("editProfileButton")) {
                        String profileInfo = reader.readLine();
                        String[] partsNew = profileInfo.split(",");

                        String newUserName = partsNew[0];
                        String newEmail = partsNew[1];
                        String newPassword = partsNew[2];

                        String oldUserAccount = reader.readLine();
                        String[] partsOld = oldUserAccount.split(",");

                        String oldUserName = partsOld[0];
                        String oldEmail = partsOld[1];
                        String oldPassword = partsOld[2];

                        User oldUser = new User(oldUserName, oldEmail, oldPassword, true);

                        Methods method = new Methods();

                        method.changeUserName(newUserName, oldUser);
                        method.changeUserEmail(newEmail, oldUser);
                        method.changePassword(newPassword, oldUser);

                        writer.println("Success");

                    } else if (button.equals("viewCustomerCartsButton")) {
                        //TODO: customerCarts

                    }

                }
                
