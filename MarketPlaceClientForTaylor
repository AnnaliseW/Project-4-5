import javax.imageio.IIOException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;

public class MarketPlaceClient extends JFrame {
    private JTextField emailField;
    private JPasswordField passwordField;

    public GUICustomerView guiCustomerView;
    public GUISellerView guiSellerView;

    public User userAccount;

    public boolean openSeller = false;
    public boolean logIn = false;


    public static void run() throws IOException {
        new MarketPlaceClient().setVisible(true);
    }


    public static void main(String[] args) throws IOException {
        run();
    }

    public MarketPlaceClient() throws IOException {


        JOptionPane.showMessageDialog(null, "Welcome to the marketplace", "Welcome", JOptionPane.INFORMATION_MESSAGE);


        try {
            Socket socket = new Socket("localhost", 1234);


            // CLIENT IS CONNECTED

            final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            final PrintWriter writer = new PrintWriter(socket.getOutputStream());


            setTitle("Sign In");
            setSize(300, 150);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setLocationRelativeTo(null);

            JLabel emailLabel = new JLabel("Email:");
            JLabel passwordLabel = new JLabel("Password:");

            emailField = new JTextField(15);
            passwordField = new JPasswordField(15);


            JButton signInButton = new JButton("Sign In");

            JButton createAccountButton = new JButton("Create Account");

            setLayout(new GridLayout(3, 2));

            add(emailLabel);
            add(emailField);

            add(passwordLabel);
            add(passwordField);

            add(signInButton);
            add(createAccountButton);


            signInButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {


                    //SEND MESSAGE "SIGN IN PRESSED" TO SERVER

                    String email = emailField.getText();
                    char[] passwordChar = passwordField.getPassword();
                    String password = new String(passwordChar);
                    String emailAndPassword = email + "," + password;
                    writer.write(emailAndPassword);
                    writer.println();
                    writer.flush();


                    //recievss message of succesfull sign in and whteher buyer or seller from server

                    //open market

                    String[] infoArray;


                    String info;
                    try {
                        info = reader.readLine();
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                    infoArray = info.split(",");
                    boolean seller = false;


                    if (infoArray[3].equals("true")) {
                        logIn = true;
                        // sign in worked


                        try {
                            String userInformation = reader.readLine();

                            String[] user = userInformation.split(",");
                            String nameUser = user[0];
                            String emailUser = user[1];
                            String passwordUser = user[2];
                            seller = Boolean.parseBoolean(user[3]);
                            //MAKES USERACCOUNT
                            userAccount = new User(nameUser, emailUser, passwordUser, seller);
                        } catch (IOException g) {
                            g.printStackTrace();
                        }


                        //USER ACCOUNT must be taken from server and put into USER

                        if (seller) {
                            openSeller = true;
                            //opens seller side

                            writer.write("seller");
                            writer.println();
                            writer.flush();


                            //open seller market
                            JFrame sellerView = new JFrame();

                            JButton sellButton;
                            JButton editButton;
                            JButton deleteButton;
                            JButton importButton;
                            JButton exportButton;
                            JButton salesByStoreButton;
                            JButton editProfileButton;
                            JButton viewCustomerCartsButton;
                            JButton exitButton;

                            User userAccount = guiCustomerView.returnUserAccount(email, password);
                            ArrayList<Product> myProducts = guiSellerView.generateMyProducts(userAccount);

                            GUICustomerView guiCustomerView = new GUICustomerView();
                            guiCustomerView.createProductArray();
                            sellerView.setTitle("Marketplace Home Page");
                            sellerView.setSize(600, 300);
                            sellerView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                            sellerView.setLocationRelativeTo(null);

                            sellButton = new JButton("Sell");
                            editButton = new JButton("Edit");
                            deleteButton = new JButton("Delete");
                            importButton = new JButton("Import");
                            exportButton = new JButton("Export");
                            salesByStoreButton = new JButton("Sales By Store");
                            editProfileButton = new JButton("Edit Profile");
                            viewCustomerCartsButton = new JButton("View Customer Carts");
                            exitButton = new JButton("Exit");

                            sellerView.setLayout(new GridLayout(3, 3));

                            sellerView.add(sellButton);
                            sellerView.add(editButton);
                            sellerView.add(deleteButton);
                            sellerView.add(importButton);
                            sellerView.add(exportButton);
                            sellerView.add(salesByStoreButton);
                            sellerView.add(editProfileButton);
                            sellerView.add(viewCustomerCartsButton);
                            sellerView.add(exitButton);

                            // implement buttons here

                            sellButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    writer.write("sellButton");

                                    JPanel panel = new JPanel(new GridLayout(5, 2));

                                    panel.add(new JLabel("Product Name:"));
                                    JTextField productNameField = new JTextField();
                                    panel.add(productNameField);

                                    panel.add(new JLabel("Store Name:"));
                                    JTextField storeNameField = new JTextField();
                                    panel.add(storeNameField);

                                    panel.add(new JLabel("Description:"));
                                    JTextField descriptionField = new JTextField();
                                    panel.add(descriptionField);

                                    panel.add(new JLabel("Quantity Selling:"));
                                    JTextField quantityField = new JTextField();
                                    panel.add(quantityField);

                                    panel.add(new JLabel("Price:"));
                                    JTextField priceField = new JTextField();
                                    panel.add(priceField);

                                    int result = JOptionPane.showConfirmDialog(null, panel, "Enter Product Details",
                                            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                                    if (result == JOptionPane.OK_OPTION) {
                                        String productName = productNameField.getText();
                                        String storeName = storeNameField.getText();
                                        String description = descriptionField.getText();
                                        int quantity = Integer.parseInt(quantityField.getText());
                                        double price = Double.parseDouble(priceField.getText());

                                        String productInfo = productName;
                                        productInfo += "," + storeName;
                                        productInfo += "," + description;
                                        productInfo += "," + quantity;
                                        productInfo += "," + price;

                                        writer.write(productInfo);

                                        String sucess = "";
                                        try {
                                            sucess = reader.readLine();
                                        } catch (IOException g) {
                                            g.printStackTrace();
                                        }

                                        if (sucess.equals("Success")) {
                                            JOptionPane.showMessageDialog(null, "Your product has been added to the market!", "Successfully Added", JOptionPane.INFORMATION_MESSAGE);
                                        }
                                    }

                                }
                            });

                            editButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    boolean cont = false;
                                    writer.write("editButton");
                                    ArrayList<Product> productList = new ArrayList<>();
                                    try {
                                        String line = reader.readLine();
                                        if (line.equals("Empty")) {
                                            JOptionPane.showMessageDialog(null, "No items to edit", "Empty List", JOptionPane.INFORMATION_MESSAGE);
                                        } else {
                                            cont = true;
                                            do {
                                                String[] parts = line.split("\n");
                                                String productName = parts[1].split(": ")[1];
                                                String storeName = parts[2].split(": ")[1];
                                                String description = parts[3].split(": ")[1];
                                                int quantityAvailable = Integer.parseInt(parts[4].split(": ")[1]);
                                                double price = Double.parseDouble(parts[5].split(": ")[1]);
                                                productList.add(new Product(productName, storeName, description, quantityAvailable, price));
                                                line = reader.readLine();
                                            } while (line != null);
                                        }
                                    } catch (IOException i) {
                                        i.printStackTrace();
                                    }

                                    if (cont) { //current productList is loaded

                                        String[] products = new String[productList.size()];
                                        for (int i = 0; i < productList.size(); i++) {
                                            products[i] = productList.get(i).statisticsToString();
                                        }
                                        String itemFromSearchChosen = (String) JOptionPane.showInputDialog(null, "Select item to edit",
                                                "Edit", JOptionPane.QUESTION_MESSAGE, null, products, products[0]);

                                        Product productToEdit = productList.get(0);

                                        int selection = 0;

                                        for (int k = 0; k < productList.size(); k++) {
                                            if (productList.get(k).statisticsToString().equals(itemFromSearchChosen)) {
                                                productToEdit = productList.get(k);
                                                selection = k;
                                                break;
                                            }
                                        }

                                        writer.println(selection);

                                        JPanel panel = new JPanel(new GridLayout(5, 2));

                                        panel.add(new JLabel("New Product Name:"));
                                        JTextField productNameField = new JTextField();
                                        panel.add(productNameField);

                                        panel.add(new JLabel("New Store Name:"));
                                        JTextField storeNameField = new JTextField();
                                        panel.add(storeNameField);

                                        panel.add(new JLabel("New Description:"));
                                        JTextField descriptionField = new JTextField();
                                        panel.add(descriptionField);

                                        panel.add(new JLabel("New Quantity Selling:"));
                                        JTextField quantityField = new JTextField();
                                        panel.add(quantityField);

                                        panel.add(new JLabel("New Price:"));
                                        JTextField priceField = new JTextField();
                                        panel.add(priceField);

                                        int result = JOptionPane.showConfirmDialog(null, panel, "Enter Product Details",
                                                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                                        if (result == JOptionPane.OK_OPTION) {
                                            String newProductName = productNameField.getText();
                                            String newStoreName = storeNameField.getText();
                                            String newDescription = descriptionField.getText();
                                            int newQuantity = Integer.parseInt(quantityField.getText());
                                            double newPrice = Double.parseDouble(priceField.getText());

                                            writer.println(newProductName);
                                            writer.println(newStoreName);
                                            writer.println(newDescription);
                                            writer.println(newQuantity);
                                            writer.println(newPrice);

                                        }

                                        String sucess = "";
                                        try {
                                            sucess = reader.readLine();
                                        } catch (IOException g) {
                                            g.printStackTrace();
                                        }

                                        if (sucess.equals("Success")) {
                                            JOptionPane.showMessageDialog(null, "Your product has been edited!", "Successfully Edited", JOptionPane.INFORMATION_MESSAGE);
                                        }
                                    }
                                }
                            });

                            deleteButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    boolean cont = false;
                                    writer.write("deleteButton");

                                    ArrayList<Product> productList = new ArrayList<>();
                                    try {
                                        String line = reader.readLine();
                                        if (line.equals("Empty")) {
                                            JOptionPane.showMessageDialog(null, "No items to edit", "Empty List", JOptionPane.INFORMATION_MESSAGE);
                                        } else {
                                            cont = true;
                                            do {
                                                String[] parts = line.split("\n");
                                                String productName = parts[1].split(": ")[1];
                                                String storeName = parts[2].split(": ")[1];
                                                String description = parts[3].split(": ")[1];
                                                int quantityAvailable = Integer.parseInt(parts[4].split(": ")[1]);
                                                double price = Double.parseDouble(parts[5].split(": ")[1]);
                                                productList.add(new Product(productName, storeName, description, quantityAvailable, price));
                                                line = reader.readLine();
                                            } while (line != null);
                                        }
                                    } catch (IOException i) {
                                        i.printStackTrace();
                                    }

                                    if (cont) {
                                        String[] products = new String[productList.size()];
                                        for (int i = 0; i < productList.size(); i++) {
                                            products[i] = productList.get(i).statisticsToString();
                                        }
                                        String itemFromSearchChosen = (String) JOptionPane.showInputDialog(null, "Select item to delete",
                                                "Delete", JOptionPane.QUESTION_MESSAGE, null, products, products[0]);

                                        Product productToDelete = productList.get(0);

                                        int selection = 0;

                                        for (int k = 0; k < productList.size(); k++) {
                                            if (productList.get(k).statisticsToString().equals(itemFromSearchChosen)) {
                                                productToDelete = productList.get(k);
                                                selection = k;
                                                break;
                                            }
                                        }

                                        writer.println(selection);

                                        String sucess = "";
                                        try {
                                            sucess = reader.readLine();
                                        } catch (IOException g) {
                                            g.printStackTrace();
                                        }
                                        if (sucess.equals("Success")) {
                                            JOptionPane.showMessageDialog(null, "Your product has been edited!", "Successfully Edited", JOptionPane.INFORMATION_MESSAGE);
                                        }
                                    }

                                }
                            });
                            importButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    writer.write("importButton");


                                }
                            });
                            exportButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    writer.write("exportButton");


                                }
                            });
                            salesByStoreButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    writer.write("salesByStoreButton");


                                }
                            });
                            editProfileButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    writer.write("editProfileButton");

                                    JOptionPane.showMessageDialog(null, "Leave fields empty if you would like to keep anything");

                                    JPanel panel = new JPanel(new GridLayout(5, 2));

                                    panel.add(new JLabel("New Name:"));
                                    JTextField newNameField = new JTextField();
                                    panel.add(newNameField);

                                    panel.add(new JLabel("New Email:"));
                                    JTextField newEmailField = new JTextField();
                                    panel.add(newEmailField);

                                    panel.add(new JLabel("New Password:"));
                                    JTextField newPasswordField = new JTextField();
                                    panel.add(newPasswordField);

                                    int result = JOptionPane.showConfirmDialog(null, panel, "Enter Product Details",
                                            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                                    if (result == JOptionPane.OK_OPTION) {
                                        String newUserName = newNameField.getText();
                                        String newUserEmail = newEmailField.getText();
                                        String newUserPassword = newPasswordField.getText();

                                        String combined = newUserName + "," + newUserEmail + "," + newUserPassword;

                                        writer.write(combined);




                                    }











                                }
                            });
                            viewCustomerCartsButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    writer.write("viewCustomerCartsButton");


                                }
                            });
                            exitButton.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    writer.write("exitButton");
                                    //TODO: Handle exiting
                                }
                            });

                        } else {
                            //opens buyer market side
                            openSeller = false;


                            writer.write("buyer");
                            writer.println();
                            writer.flush();


                            JFrame CustomerView = new JFrame();

                            GUICustomerView guiCustomerView = new GUICustomerView();


                            // NOTE : sign in message occurs twice using this method


                            //creating user
                            User userAccount = guiCustomerView.returnUserAccount(email, password);
                            //creates product array list from file
                            guiCustomerView.createProductArray();
                            ArrayList<ShoppingCartProduct> shoppingCart = guiCustomerView.createShoppingCartArray(userAccount);


                            //creates shopping cart array list from file
                            CustomerView.setTitle("Marketplace Home Page");
                            CustomerView.setSize(600, 300);
                            CustomerView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                            CustomerView.setLocationRelativeTo(null);

                            JButton seeProductsButton;
                            JButton searchProductsButton;
                            JButton viewShoppingCartButton;
                            JButton editProfileButton;
                            JButton viewPurchaseHistoryButton;
                            JButton exitButton;

                            seeProductsButton = new JButton("See Products");
                            searchProductsButton = new JButton("Search Products");
                            viewShoppingCartButton = new JButton("View Shopping Cart");
                            editProfileButton = new JButton("Edit Profile");
                            viewPurchaseHistoryButton = new JButton("View Purchase History");
                            exitButton = new JButton("Exit");


                            CustomerView.setLayout (new GridLayout(2, 3));

                            CustomerView.add(seeProductsButton);
                            CustomerView.add(searchProductsButton);
                            CustomerView.add(viewShoppingCartButton);
                            CustomerView.add(editProfileButton);
                            CustomerView.add(viewPurchaseHistoryButton);
                            CustomerView.add(exitButton);

                            CustomerView.setVisible(true);




                        }

                    }
                }
            });


            //send info to server


        } catch (IOException e) {
            throw new RuntimeException(e);
        }


    }



}
